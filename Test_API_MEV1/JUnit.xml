<?xml version="1.0" encoding="UTF-8"?><testrun duration="10511" footerText="Generated by IntelliJ IDEA on 24.05.2020, 18:18" name="Test_API_Java1">
    <count name="total" value="36"/>
    <count name="error" value="1"/>
    <count name="failed" value="3"/>
    <count name="passed" value="32"/>
    <config nameIsGenerated="true" configId="JUnit" name="Test_API_Java1">
        <module name="Test_API_MEV1"/>
        <option name="PACKAGE_NAME" value=""/>
        <option name="MAIN_CLASS_NAME" value="Test_API_Java1"/>
        <option name="TEST_OBJECT" value="class"/>
    </config>
    <suite duration="2" name="JUnit Vintage" status="error">
        <suite duration="2" locationUrl="java:suite://Test_API_Java1" name="Test_API_Java1" status="error">
            <test duration="2" locationUrl="java:suite://Test_API_Java1" name="initializationError" status="error">
                <output type="stdout"/>
                <output type="stderr">java.lang.Exception: No public static parameters method on class Test_API_Java1
&#13;
	at org.junit.runners.Parameterized$RunnersFactory.getParametersMethod(Parameterized.java:451)&#13;
	at org.junit.runners.Parameterized$RunnersFactory.&amp;lt;init&amp;gt;(Parameterized.java:371)&#13;
	at org.junit.runners.Parameterized$RunnersFactory.&amp;lt;init&amp;gt;(Parameterized.java:360)&#13;
	at org.junit.runners.Parameterized.&amp;lt;init&amp;gt;(Parameterized.java:303)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)&#13;
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)&#13;
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)&#13;
	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)&#13;
	at org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder$DefensiveAnnotatedBuilder.buildRunner(DefensiveAllDefaultPossibilitiesBuilder.java:113)&#13;
	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)&#13;
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)&#13;
	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)&#13;
	at org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.runnerForClass(DefensiveAllDefaultPossibilitiesBuilder.java:56)&#13;
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)&#13;
	at org.junit.vintage.engine.discovery.ClassSelectorResolver.resolveTestClass(ClassSelectorResolver.java:66)&#13;
	at org.junit.vintage.engine.discovery.ClassSelectorResolver.resolve(ClassSelectorResolver.java:47)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.lambda$resolve$2(EngineDiscoveryRequestResolution.java:134)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359)&#13;
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)&#13;
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolve(EngineDiscoveryRequestResolution.java:185)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolve(EngineDiscoveryRequestResolution.java:125)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolveCompletely(EngineDiscoveryRequestResolution.java:91)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.run(EngineDiscoveryRequestResolution.java:82)&#13;
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolver.resolve(EngineDiscoveryRequestResolver.java:113)&#13;
	at org.junit.vintage.engine.discovery.VintageDiscoverer.discover(VintageDiscoverer.java:42)&#13;
	at org.junit.vintage.engine.VintageTestEngine.discover(VintageTestEngine.java:62)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.discoverEngineRoot(DefaultLauncher.java:181)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:168)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)&#13;
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)&#13;
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)&#13;
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)&#13;
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)&#13;
</output>
            </test>
        </suite>
    </suite>
    <suite duration="10509" name="JUnit Jupiter" status="failed">
        <suite duration="10509" locationUrl="java:suite://Test_API_Java1" name="Test_API_Java1" status="failed">
            <suite duration="4647" locationUrl="java:test://Test_API_Java1/requestUs1" name="Проверка на соответствие города стране" metainfo="java.lang.String, java.lang.String, java.lang.String" status="failed">
                <test duration="3285" locationUrl="java:test://Test_API_Java1/requestUs1" name="[1] q=, London, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="280" locationUrl="java:test://Test_API_Java1/requestUs1" name="[2] q=, Liverpool, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="201" locationUrl="java:test://Test_API_Java1/requestUs1" name="[3] q=, Riga, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="failed">
                    <output type="stdout"/>
                    <output type="stderr">org.opentest4j.AssertionFailedError: 
</output>
                    <output type="stdout">Expected :
</output>
                    <output type="stderr">LV
</output>
                    <output type="stdout">Actual   :
</output>
                    <diff actual="GB" expected="LV"/>
                    <output type="stderr">GB
&#13;
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)&#13;
	at org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1124)&#13;
	at Test_API_Java1.requestUs1(Test_API_Java1.java:85)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:498)&#13;
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)&#13;
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:171)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:167)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:114)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:59)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:198)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:133)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:101)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$11$1.accept(ReferencePipeline.java:373)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:101)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)&#13;
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)&#13;
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)&#13;
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)&#13;
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)&#13;
</output>
                </test>
                <test duration="209" locationUrl="java:test://Test_API_Java1/requestUs1" name="[4] q=, Belfast, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="205" locationUrl="java:test://Test_API_Java1/requestUs1" name="[5] q=, Elgin, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="failed">
                    <output type="stdout"/>
                    <output type="stderr">org.opentest4j.AssertionFailedError: 
</output>
                    <output type="stdout">Expected :
</output>
                    <output type="stderr">US
</output>
                    <output type="stdout">Actual   :
</output>
                    <diff actual="GB" expected="US"/>
                    <output type="stderr">GB
&#13;
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)&#13;
	at org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1124)&#13;
	at Test_API_Java1.requestUs1(Test_API_Java1.java:85)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:498)&#13;
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)&#13;
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:171)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:167)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:114)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:59)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:198)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:133)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:101)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$11$1.accept(ReferencePipeline.java:373)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:101)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)&#13;
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)&#13;
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)&#13;
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)&#13;
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)&#13;
</output>
                </test>
                <test duration="207" locationUrl="java:test://Test_API_Java1/requestUs1" name="[6] q=, Bude, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="260" locationUrl="java:test://Test_API_Java1/requestUs1" name="[7] q=, Ashford, appid=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
            </suite>
            <suite duration="1431" locationUrl="java:test://Test_API_Java1/requestUs2" name="Проверка на соответствие количества полей в разделе погода" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                <test duration="268" locationUrl="java:test://Test_API_Java1/requestUs2" name="[1] q=, London, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="184" locationUrl="java:test://Test_API_Java1/requestUs2" name="[2] q=, Liverpool, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="201" locationUrl="java:test://Test_API_Java1/requestUs2" name="[3] q=, Riga, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="186" locationUrl="java:test://Test_API_Java1/requestUs2" name="[4] q=, Belfast, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="197" locationUrl="java:test://Test_API_Java1/requestUs2" name="[5] q=, Elgin, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="210" locationUrl="java:test://Test_API_Java1/requestUs2" name="[6] q=, Bude, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
                <test duration="185" locationUrl="java:test://Test_API_Java1/requestUs2" name="[7] q=, Ashford, appid=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout"/>
                </test>
            </suite>
            <suite duration="1613" locationUrl="java:test://Test_API_Java1/requestUs3" name="Проверка на то что температура в пределах максимума и минимума(Способ 1)" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                <test duration="267" locationUrl="java:test://Test_API_Java1/requestUs3" name="[1] q=, London, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">293.33 293.15 293.71
</output>
                </test>
                <test duration="225" locationUrl="java:test://Test_API_Java1/requestUs3" name="[2] q=, Liverpool, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">289.3 287.59 290.93
</output>
                </test>
                <test duration="217" locationUrl="java:test://Test_API_Java1/requestUs3" name="[3] q=, Riga, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">285.15 285.15 285.15
</output>
                </test>
                <test duration="233" locationUrl="java:test://Test_API_Java1/requestUs3" name="[4] q=, Belfast, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">290.64 290.15 291.48
</output>
                </test>
                <test duration="241" locationUrl="java:test://Test_API_Java1/requestUs3" name="[5] q=, Elgin, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">294.86 293.15 296.48
</output>
                </test>
                <test duration="205" locationUrl="java:test://Test_API_Java1/requestUs3" name="[6] q=, Bude, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">289.37 286.48 292.59
</output>
                </test>
                <test duration="225" locationUrl="java:test://Test_API_Java1/requestUs3" name="[7] q=, Ashford, appid=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">292.26 289.82 293.71
</output>
                </test>
            </suite>
            <suite duration="1446" locationUrl="java:test://Test_API_Java1/requestUs4" name="Проверка на то что температура в пределах максимума и минимума(Способ 2)" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                <test duration="220" locationUrl="java:test://Test_API_Java1/requestUs4" name="[1] q=, London, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">293.33 293.15 293.71
</output>
                </test>
                <test duration="203" locationUrl="java:test://Test_API_Java1/requestUs4" name="[2] q=, Liverpool, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">289.3 287.59 290.93
</output>
                </test>
                <test duration="204" locationUrl="java:test://Test_API_Java1/requestUs4" name="[3] q=, Riga, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">285.15 285.15 285.15
</output>
                </test>
                <test duration="213" locationUrl="java:test://Test_API_Java1/requestUs4" name="[4] q=, Belfast, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">290.64 290.15 291.48
</output>
                </test>
                <test duration="204" locationUrl="java:test://Test_API_Java1/requestUs4" name="[5] q=, Elgin, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">294.86 293.15 296.48
</output>
                </test>
                <test duration="203" locationUrl="java:test://Test_API_Java1/requestUs4" name="[6] q=, Bude, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">289.37 286.48 292.59
</output>
                </test>
                <test duration="199" locationUrl="java:test://Test_API_Java1/requestUs4" name="[7] q=, Ashford, appid=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">292.26 289.82 293.71
</output>
                </test>
            </suite>
            <suite duration="1372" locationUrl="java:test://Test_API_Java1/requestUs" name="Проверка на соответствие ответа формату json, соответствие статус кода, соответствие города в запросе и в ответе" metainfo="java.lang.String, java.lang.String, java.lang.String" status="failed">
                <test duration="236" locationUrl="java:test://Test_API_Java1/requestUs" name="[1] q=, London, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=London&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=London
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:08 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 468
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=london
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: -0.13,
        &amp;quot;lat&amp;quot;: 51.51
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 803,
            &amp;quot;main&amp;quot;: &amp;quot;Clouds&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;broken clouds&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;04d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 293.33,
        &amp;quot;feels_like&amp;quot;: 288.49,
        &amp;quot;temp_min&amp;quot;: 293.15,
        &amp;quot;temp_max&amp;quot;: 293.71,
        &amp;quot;pressure&amp;quot;: 1030,
        &amp;quot;humidity&amp;quot;: 45
    },
    &amp;quot;visibility&amp;quot;: 10000,
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 6.2,
        &amp;quot;deg&amp;quot;: 300
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 75
    },
    &amp;quot;dt&amp;quot;: 1590329555,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 1,
        &amp;quot;id&amp;quot;: 1414,
        &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590292590,
        &amp;quot;sunset&amp;quot;: 1590350316
    },
    &amp;quot;timezone&amp;quot;: 3600,
    &amp;quot;id&amp;quot;: 2643743,
    &amp;quot;name&amp;quot;: &amp;quot;London&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
                <test duration="192" locationUrl="java:test://Test_API_Java1/requestUs" name="[2] q=, Liverpool, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Liverpool&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Liverpool
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:08 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 473
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=liverpool
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: -2.98,
        &amp;quot;lat&amp;quot;: 53.41
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 802,
            &amp;quot;main&amp;quot;: &amp;quot;Clouds&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;scattered clouds&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;03d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 289.3,
        &amp;quot;feels_like&amp;quot;: 283.37,
        &amp;quot;temp_min&amp;quot;: 287.59,
        &amp;quot;temp_max&amp;quot;: 290.93,
        &amp;quot;pressure&amp;quot;: 1031,
        &amp;quot;humidity&amp;quot;: 63
    },
    &amp;quot;visibility&amp;quot;: 10000,
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 8.2,
        &amp;quot;deg&amp;quot;: 290
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 40
    },
    &amp;quot;dt&amp;quot;: 1590329578,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 1,
        &amp;quot;id&amp;quot;: 1399,
        &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590292707,
        &amp;quot;sunset&amp;quot;: 1590351567
    },
    &amp;quot;timezone&amp;quot;: 3600,
    &amp;quot;id&amp;quot;: 2644210,
    &amp;quot;name&amp;quot;: &amp;quot;Liverpool&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
                <test duration="180" locationUrl="java:test://Test_API_Java1/requestUs" name="[3] q=, Riga, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="failed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Riga&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Riga
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:08 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 463
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=riga
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: 24.08,
        &amp;quot;lat&amp;quot;: 57
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 804,
            &amp;quot;main&amp;quot;: &amp;quot;Clouds&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;overcast clouds&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;04d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 285.15,
        &amp;quot;feels_like&amp;quot;: 283,
        &amp;quot;temp_min&amp;quot;: 285.15,
        &amp;quot;temp_max&amp;quot;: 285.15,
        &amp;quot;pressure&amp;quot;: 1016,
        &amp;quot;humidity&amp;quot;: 87
    },
    &amp;quot;visibility&amp;quot;: 10000,
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 3.1,
        &amp;quot;deg&amp;quot;: 160
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 90
    },
    &amp;quot;dt&amp;quot;: 1590329398,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 1,
        &amp;quot;id&amp;quot;: 1876,
        &amp;quot;country&amp;quot;: &amp;quot;LV&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590284940,
        &amp;quot;sunset&amp;quot;: 1590346345
    },
    &amp;quot;timezone&amp;quot;: 10800,
    &amp;quot;id&amp;quot;: 456173,
    &amp;quot;name&amp;quot;: &amp;quot;Rīga&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                    <output type="stderr">org.opentest4j.AssertionFailedError: 
</output>
                    <output type="stdout">Expected :
</output>
                    <output type="stderr">Rīga
</output>
                    <output type="stdout">Actual   :
</output>
                    <diff actual="Riga" expected="Rīga"/>
                    <output type="stderr">Riga
&#13;
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)&#13;
	at org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1124)&#13;
	at Test_API_Java1.requestUs(Test_API_Java1.java:63)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:498)&#13;
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)&#13;
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:171)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:167)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:114)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:59)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:198)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:133)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:101)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$11$1.accept(ReferencePipeline.java:373)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)&#13;
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:101)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(ArrayList.java:1257)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)&#13;
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)&#13;
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)&#13;
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)&#13;
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)&#13;
</output>
                </test>
                <test duration="190" locationUrl="java:test://Test_API_Java1/requestUs" name="[4] q=, Belfast, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Belfast&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Belfast
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:08 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 472
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=belfast
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: -5.93,
        &amp;quot;lat&amp;quot;: 54.58
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 802,
            &amp;quot;main&amp;quot;: &amp;quot;Clouds&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;scattered clouds&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;03d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 290.64,
        &amp;quot;feels_like&amp;quot;: 287.22,
        &amp;quot;temp_min&amp;quot;: 290.15,
        &amp;quot;temp_max&amp;quot;: 291.48,
        &amp;quot;pressure&amp;quot;: 1028,
        &amp;quot;humidity&amp;quot;: 63
    },
    &amp;quot;visibility&amp;quot;: 10000,
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 5.1,
        &amp;quot;deg&amp;quot;: 240
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 49
    },
    &amp;quot;dt&amp;quot;: 1590329339,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 1,
        &amp;quot;id&amp;quot;: 1376,
        &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590293031,
        &amp;quot;sunset&amp;quot;: 1590352659
    },
    &amp;quot;timezone&amp;quot;: 3600,
    &amp;quot;id&amp;quot;: 2655984,
    &amp;quot;name&amp;quot;: &amp;quot;Belfast&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
                <test duration="192" locationUrl="java:test://Test_API_Java1/requestUs" name="[5] q=, Elgin, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Elgin&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Elgin
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:09 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 474
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=elgin
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: -88.28,
        &amp;quot;lat&amp;quot;: 42.04
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 802,
            &amp;quot;main&amp;quot;: &amp;quot;Clouds&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;scattered clouds&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;03d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 294.86,
        &amp;quot;feels_like&amp;quot;: 295.97,
        &amp;quot;temp_min&amp;quot;: 293.15,
        &amp;quot;temp_max&amp;quot;: 296.48,
        &amp;quot;pressure&amp;quot;: 1014,
        &amp;quot;humidity&amp;quot;: 78
    },
    &amp;quot;visibility&amp;quot;: 16093,
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 2.22,
        &amp;quot;deg&amp;quot;: 200
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 40
    },
    &amp;quot;dt&amp;quot;: 1590329586,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 1,
        &amp;quot;id&amp;quot;: 2658,
        &amp;quot;country&amp;quot;: &amp;quot;US&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590315871,
        &amp;quot;sunset&amp;quot;: 1590369351
    },
    &amp;quot;timezone&amp;quot;: -18000,
    &amp;quot;id&amp;quot;: 4890864,
    &amp;quot;name&amp;quot;: &amp;quot;Elgin&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
                <test duration="188" locationUrl="java:test://Test_API_Java1/requestUs" name="[6] q=, Bude, APPID=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Bude&amp;amp;APPID=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Bude
				payload3=APPID=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:09 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 457
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?APPID=9e36d5af654c0bc9e5994799dd93bd19&amp;amp;q=bude
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: -4.54,
        &amp;quot;lat&amp;quot;: 50.82
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 800,
            &amp;quot;main&amp;quot;: &amp;quot;Clear&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;clear sky&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;01d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 289.37,
        &amp;quot;feels_like&amp;quot;: 287.78,
        &amp;quot;temp_min&amp;quot;: 286.48,
        &amp;quot;temp_max&amp;quot;: 292.59,
        &amp;quot;pressure&amp;quot;: 1032,
        &amp;quot;humidity&amp;quot;: 81
    },
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 3.58,
        &amp;quot;deg&amp;quot;: 305,
        &amp;quot;gust&amp;quot;: 5.81
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 2
    },
    &amp;quot;dt&amp;quot;: 1590329586,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 3,
        &amp;quot;id&amp;quot;: 2002666,
        &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590293839,
        &amp;quot;sunset&amp;quot;: 1590351185
    },
    &amp;quot;timezone&amp;quot;: 3600,
    &amp;quot;id&amp;quot;: 2654380,
    &amp;quot;name&amp;quot;: &amp;quot;Bude&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
                <test duration="194" locationUrl="java:test://Test_API_Java1/requestUs" name="[7] q=, Ashford, appid=9e36d5af654c0bc9e5994799dd93bd19" metainfo="java.lang.String, java.lang.String, java.lang.String" status="passed">
                    <output type="stdout">Request method:	GET
Request URI:	http://api.openweathermap.org/data/2.5/weather?q=Ashford&amp;amp;appid=9e36d5af654c0bc9e5994799dd93bd19
Proxy:			&amp;lt;none&amp;gt;
Request params:	&amp;lt;none&amp;gt;
Query params:	&amp;lt;none&amp;gt;
Form params:	&amp;lt;none&amp;gt;
Path params:	payload1=q=
				payload2=Ashford
				payload3=appid=9e36d5af654c0bc9e5994799dd93bd19
Headers:		Accept=*/*
				Content-Type=application/json; charset=UTF-8
Cookies:		&amp;lt;none&amp;gt;
Multiparts:		&amp;lt;none&amp;gt;
Body:			&amp;lt;none&amp;gt;
HTTP/1.1 200 OK
Server: openresty
Date: Sun, 24 May 2020 14:18:09 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 479
Connection: keep-alive
X-Cache-Key: /data/2.5/weather?q=ashford
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET, POST
{
    &amp;quot;coord&amp;quot;: {
        &amp;quot;lon&amp;quot;: 0.87,
        &amp;quot;lat&amp;quot;: 51.15
    },
    &amp;quot;weather&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: 500,
            &amp;quot;main&amp;quot;: &amp;quot;Rain&amp;quot;,
            &amp;quot;description&amp;quot;: &amp;quot;light rain&amp;quot;,
            &amp;quot;icon&amp;quot;: &amp;quot;10d&amp;quot;
        }
    ],
    &amp;quot;base&amp;quot;: &amp;quot;stations&amp;quot;,
    &amp;quot;main&amp;quot;: {
        &amp;quot;temp&amp;quot;: 292.26,
        &amp;quot;feels_like&amp;quot;: 290.21,
        &amp;quot;temp_min&amp;quot;: 289.82,
        &amp;quot;temp_max&amp;quot;: 293.71,
        &amp;quot;pressure&amp;quot;: 1031,
        &amp;quot;humidity&amp;quot;: 44
    },
    &amp;quot;wind&amp;quot;: {
        &amp;quot;speed&amp;quot;: 1.79,
        &amp;quot;deg&amp;quot;: 296,
        &amp;quot;gust&amp;quot;: 2.68
    },
    &amp;quot;rain&amp;quot;: {
        &amp;quot;1h&amp;quot;: 0.19
    },
    &amp;quot;clouds&amp;quot;: {
        &amp;quot;all&amp;quot;: 83
    },
    &amp;quot;dt&amp;quot;: 1590329560,
    &amp;quot;sys&amp;quot;: {
        &amp;quot;type&amp;quot;: 3,
        &amp;quot;id&amp;quot;: 2002488,
        &amp;quot;country&amp;quot;: &amp;quot;GB&amp;quot;,
        &amp;quot;sunrise&amp;quot;: 1590292451,
        &amp;quot;sunset&amp;quot;: 1590349976
    },
    &amp;quot;timezone&amp;quot;: 3600,
    &amp;quot;id&amp;quot;: 2656955,
    &amp;quot;name&amp;quot;: &amp;quot;Ashford&amp;quot;,
    &amp;quot;cod&amp;quot;: 200
}
</output>
                </test>
            </suite>
        </suite>
    </suite>
</testrun>
